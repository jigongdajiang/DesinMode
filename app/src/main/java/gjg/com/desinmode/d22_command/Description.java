package gjg.com.desinmode.d22_command;

/**
 * @author : gongdaocai
 * @date : 2017/7/19
 * FileName:
 * @description:
 *  命令行模式
 */


public class Description {
    /**
     * 定义:
     *      将一个请求封装成对象，从而使你可以用不同的请求对客户进行参数化，对请求排对或者记录日志，以及支持可撤销的操作
     * 场景:
     *      系统需要请求调用者和接收者解耦，使得调用者和接受者不直接交互
     *      系统需要在不同的时间指定请求，对请求排队和执行请求
     *      系统需要支持命令的撤销和恢复操作
     *      系统需要将一组操作组合在一起，即宏命令
     * 角色:
     *      命令角色(Command):抽象的命令接口，定义命令方法
     *      具体命令角色(ConcreteCommand):命令接口的实现，通常会含有一个接收者，并调用接受者的方法来完成命令要执行的操作
     *      调用者角色(Invoker):负责调用命令对象执行请求，通常会持有命令对象(可支持多个命令),它是Clinet真正触发并要求执行命令操作的地方
     *      接收者(Receiver):是真正执行命令的地方，任何一个类都可以成为接收者，只要它实现了命令要求实现的功能
     *      客户角色(Client):这里的Client更多承载的是装配的角色，它可以从创建对象，并设置命令对象的接收者。
     * 案例:
     *      通过命令对象修改一个对象属性，支持撤销
     *      案例总结:
     *          每个命令都是一个操作:请求方发出的请求，要求执行一个操作，接受者接受命名并执行一个操作
     *          命令模式允许请求方和接收方独立开来，请求方不须知道接收方的接口，也不必关注接收方式怎么接收的，什么时候执行的，以及怎么被执行的
     *          命令模式的请求是一个对象，也就可以被存储和传递
     *          命令行模式的关键是抽象命令接口，且请求方针对接口编程，只有实现了抽象命令接口的类才能拥有接收者
     * Android:
     *      Runnable对象
     *
     *      Runnable 是命令接口
     *      Thread 是调用者
     * 利弊:
     *      利:低耦合易扩展
     *      弊:会创建好多命令实现类
     */
}
