package gjg.com.desinmode.d17_interpreter;

/**
 * @author : gongdaocai
 * @date : 2017/7/20
 * FileName:
 * @description: 解析器模式
 */


public class Description {
    /**
     * 定义:
     *      定义语言的文法，并建立一个解释器来解释语言中的句子，它属于类的行为模式。这里语言的意思是指使用规定格式和语法的代码
     * 场景:
     *      如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建
     *      一个解释器，该解释器通过解释这些句子来解决问题。且文法简单，效率要求不高时效果最好
     * 角色:
     *      抽象表达式角色(AbstractExpression):声明一个抽象的解释操作，这个接口是所有具体的表达式都要实现的。
     *      终结符表达式角色(TerminalExpression):实现文法中的元素相关联的解释操作，通常一个解释器模式中只有一个终结符表达式
     *      非终结符表达式角色(NonterminalExpression):文法中每条规则对应一个非终结符表达式，非终结符表达式根据逻辑的复杂度
     *          而增加，原则上每个文法都应对应一个非终结符表达式
     *      环境角色(Context):包含解释器之外的全局信息
     * 案例:
     *      实现一个算数表达式  (a*b)/((a-b)+c)
     * android:
     *      包管理服务对应用包的解析使用了解释器模式。包管理服务采用PackageParser类来负责应用包的解析，PackageParser类使用
     *      了解释器模式对一个应用包进行解释，对于应用包中的每种语法结构都创建了对应的类，来分别搜集应用包中的相应信息。
     * 利弊:
     *      利:扩展性强。可随意加语法规则
     *      弊:类膨胀，由于递归的使用当语法复杂时效率比较低下
     */
}
